
backend.h,245
#define BACKEND_H2,18
  instr* instruction;14,241
  unsigned int cycle_num;15,263
  void* next;16,289
} instr_history_entry;17,303
  instr_history_entry* entry;20,344
  unsigned int step;21,374
  void* next;22,395
} history_step;23,409

error.h,334
#define ERROR_H2,16
#define SUCCESS 7,74
#define UNKNOWN_ERROR 8,92
#define INSTR_PARSING_ERROR 9,116
#define IDX_OVERFLOW 10,147
#define BACKEND_FINISHED 11,171
#define INSTR_QUEUE_FULL 12,199
#define REGISTER_MAP_FULL 13,227
#define ACTIVE_LIST_FULL 14,256
#define DECODE_BUFFER_FULL 15,284
typedef int error_code;17,315

committer.h,25
#define COMMITTER_H2,20

committer.c,340
static instr* __instructions_to_commit[__instructions_to_commit3,24
static unsigned int __instructions_to_commit_size 4,92
static instr* load_store_mem_cycle 5,147
void __calc_committer(7,191
void __edge_committer(25,774
unsigned int how_many_will_commit_next_clock(57,1685
unsigned int how_many_addr_will_commit_next_clock(61,1777

active_list.h,280
#define ACTIVE_LIST_H2,22
#define ACTIVE_LIST_SIZE 12,193
  instr* instruction;15,239
  char is_ready_on_next_clock;16,261
  bool is_res_ready_on_next_clock;17,292
  bool has_done_mem_cycle;18,327
  phys_reg physical;19,354
  void* next;20,375
} active_list_entry;21,389

instr_queue.h,140
#define INSTR_QUEUE_H2,22
  instr* instruction;15,252
  unsigned int cycles_left;16,274
  void* next;17,302
} instr_queue_entry;18,316

branch_stack.h,131
#define BRANCH_STACK2,21
  instr* instruction;8,101
  void* next;9,123
  bool is_ready_on_next_clock;10,137
} bs_entry;11,168

active_list.c,616
static active_list_entry* head 3,26
active_list_entry* get_newest_entry(5,66
unsigned int size(14,257
char active_list_is_full(24,431
char active_list_is_empty(28,510
error_code active_list_add(32,576
void active_list_set_instr_res_ready(58,1305
void active_list_set_instr_ready(70,1619
bool active_list_is_instr_ready(86,2096
instr* active_list_get_instr_ready(98,2413
void active_list_commit_instruction(118,2910
unsigned int active_list_how_many_spots_next_clock(126,3081
void active_list_handle_mispredict(130,3234
unsigned int num_active_branches(159,3931
void active_list_set_mem_cycle(171,4182

instr_queue.c,922
static instr_queue_entry* int_queue_head 6,97
static instr_queue_entry* addr_queue_head 9,164
static instr_queue_entry* fp_queue_head 12,239
static instr* _queue_lookahead[_queue_lookahead14,288
static size_t _queue_lookahead_size 15,359
size_t get_queue_size(18,421
instr_queue_entry** get_queue_by_type(29,640
void instr_queue_remove(47,1015
bool will_instr_inputs_be_ready(65,1509
instr* instr_queue_get_ready_addr_instr(82,2127
instr* instr_queue_get_ready_fp_instr(110,2896
instr* instr_queue_get_ready_int_instr(124,3356
void __calc_instr_queue(147,3906
void insert_instruction(181,4773
void __edge_instr_queue(219,5767
unsigned int instr_queue_free_int_spots_next_clock(252,6655
unsigned int instr_queue_free_addr_spots_next_clock(256,6817
unsigned int instr_queue_free_fp_spots_next_clock(260,6984
void instr_queue_handle_mispredict_helper(265,7142
void instr_queue_handle_mispredict(285,7637

fetch_stage.h,139
#define FETCH_STAGE_H2,22
  instr* instruction;9,126
  unsigned int cycles_left;10,148
  void* next;11,176
} fetch_stage_entry;12,190

branch_stack.c,142
static bs_entry* head 3,27
void bs_add(5,58
void bs_remove(20,438
void bs_set_instr_ready(37,822
unsigned int bs_size_next_clock(47,1117

decode_buffer.h,144
#define DECODE_BUFFER_H2,24
  instr* instruction;13,218
  unsigned int cycles_left;14,240
  void* next;15,268
} decode_buffer_entry;16,282

fetch_stage.c,237
static fetch_stage_entry* head 3,26
unsigned int __calc_fetch_stage(5,66
void __edge_fetch_stage_add_instr(12,277
instr* fetch_get_ready_instr(36,866
void fetch_stage_remove_instr(53,1219
void fetch_stage_handle_mispredict(69,1623

decode_buffer.c,532
static decode_buffer_entry* decode_buffer_head 3,28
static instr* __calc_scheduled_to_be_added[__calc_scheduled_to_be_added5,85
static unsigned int __calc_scheduled_size 6,160
unsigned int get_size(8,208
bool is_full(18,393
void add_instruction(22,473
void __calc_decode_buffer(37,935
void __edge_decode_buffer(53,1379
instr* decode_buffer_get_next_ready_instr(79,2070
void decode_buffer_remove_instruction(97,2513
unsigned int decode_buffer_free_spots_next_clock(113,2968
void decode_buffer_handle_mispredict(146,3993

misc.c,23
unsigned int min(3,19

frontend.c,426
static instr** instruction_buffer;3,23
static unsigned int idx 4,58
static unsigned int capacity 5,87
void frontend_init(7,122
void frontend_enqueue(12,245
void frontend_clean(21,490
error_code frontend_getinstr_with_step(29,629
error_code frontend_getinstr(40,889
unsigned int frontend_get_instr_count(48,1070
unsigned int frontend_get_max_step(52,1129
unsigned int frontend_augment_steps_starting_at_addr(63,1414

mipsr10k.c,68
int main(14,239
bool is_empty(62,1407
void print_history(73,1557

instr.c,263
error_code parse_instruction(9,213
void skip_whitespace(68,1368
error_code sm_parse_op(72,1442
error_code sm_parse_next_hex(79,1620
instr_operation parse_op(102,2074
const char* op_from_instr(127,2416
char* instr_str(144,2683
const char* get_str(154,3076

functional.h,138
#define FUNCTIONAL_H2,21
  instr* instruction;10,149
  unsigned int cycles_left;11,171
  void* next;12,199
} functional_entry;13,213

misc.h,20
#define MISC_H2,15

frontend.h,24
#define FRONTEND_H2,19

instr.h,576
#define INSTR_HEADER2,21
  NONE,13,192
  FETCH,14,200
  DECODE,15,209
  ISSUE,16,219
  EXECUTE,17,228
  FINISHED,18,239
  FINISHED, MEM,18,239
  COMMITTED19,256
} instr_stage;20,268
  LOAD,23,299
  STORE,24,307
  INTEGER,25,316
  BRANCH,26,327
  FPADD,27,337
  FPMUL,28,346
  UNKNOWN 29,355
} instr_operation;30,420
typedef unsigned int reg;32,440
  instr_operation op;35,484
  reg rs;36,506
  reg rt;37,528
  reg rd;38,550
  unsigned int extra;39,575
  unsigned int addr;42,670
  unsigned int step;45,721
  instr_stage stage;46,742
} instr;47,763

functional.c,426
functional_entry* head 3,25
functional_entry* next 4,56
static unsigned int taking_int 5,87
static unsigned int taking_fp 6,123
static unsigned int taking_addr 7,158
void queue_in_next(9,196
void __calc_functional_units(26,635
void remove_head(44,1471
void queue(60,1850
void __edge_functional_units(71,2095
unsigned int f_taking_int(139,3950
unsigned int f_taking_fp(144,4005
unsigned int f_taking_addr(149,4058

reg_map.c,277
free_list_entry* free_list 6,124
busy_list_entry* busy_list 7,159
void reg_map_init(13,262
phys_reg reg_map_assign(22,406
void add_to_free_list(36,755
void add_to_busy_list(50,1133
instr* reg_map_get_latest_instr_writing_to(68,1633
void reg_map_free_by_logical(81,2043

backend.c,380
static unsigned int backend_cycle 3,22
static unsigned int pc_addr 4,61
static unsigned int backend_step 5,94
static instr* instr_mispredicted 6,132
static history_step* history;9,227
void backend_branch_mispredict(13,290
error_code backend_cycle_step(17,382
unsigned int record_history(82,2030
history_step* get_history(151,3961
unsigned int backend_get_cycle(155,4012

error.c,28
const char* get_error(3,20

reg_map.h,361
#define REGMAP_H2,17
#define PHYS_REGS 8,96
#define LOGI_REGS 9,117
typedef unsigned int phys_reg;11,139
typedef unsigned int logi_reg;12,170
  phys_reg physical;15,219
  void* next;16,240
} free_list_entry;17,254
  phys_reg physical;20,291
  logi_reg logical;21,312
  instr* instruction_writing;22,332
  void* next;23,362
} busy_list_entry;24,376

constants.h,416
#define BACKEND_DISPATCH_PER_CYCLE 7,179
#define DECODE_BUFFER_SIZE 12,278
#define INT_QUEUE_SIZE 16,338
#define ADDR_QUEUE_SIZE 20,396
#define FP_QUEUE_SIZE 24,453
#define BRANCH_STACK_SIZE 28,512
#define FETCH_CYCLES 35,670
#define DECODE_CYCLES 39,723
#define ISSUE_CYCLES 43,776
#define FUNCTIONAL_INTEGER_CYCLES 47,841
#define FUNCTIONAL_FP_CYCLES 51,914
#define FUNCTIONAL_LOAD_STORE_CYCLES 55,990
