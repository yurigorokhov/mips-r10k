
backend.h,65
#define BACKEND_H2,18
#define BACKEND_DISPATCH_PER_CYCLE 8,114

error.h,232
#define ERROR_H2,16
#define SUCCESS 7,74
#define UNKNOWN_ERROR 8,92
#define INSTR_PARSING_ERROR 9,116
#define IDX_OVERFLOW 10,147
#define BACKEND_FINISHED 11,171
#define INSTR_QUEUE_FULL 12,200
typedef int error_code;14,230

instr_queue.h,118
#define INSTR_QUEUE_H2,22
#define INT_QUEUE_SIZE 8,104
#define ADDR_QUEUE_SIZE 9,130
#define FP_QUEUE_SIZE 10,157

instr_queue.c,312
static instr* INTEGER_QUEUE[INTEGER_QUEUE4,43
static instr* ADDRESS_QUEUE[ADDRESS_QUEUE7,106
static instr* FP_QUEUE[FP_QUEUE10,177
int get_queue_free_spot(13,237
int get_int_queue_free_spot(23,399
int get_addr_queue_free_spot(27,495
int get_fp_queue_free_spot(31,593
error_code instr_queue_add(35,682

frontend.c,225
static instr** instruction_buffer;3,23
static unsigned int idx 4,58
static unsigned int capacity 5,87
void frontend_init(7,122
void frontend_enqueue(12,245
void frontend_clean(21,490
error_code frontend_getinsr(25,545

mipsr10k.c,16
int main(9,141

instr.c,171
error_code parse_instruction(9,213
void skip_whitespace(66,1314
error_code sm_parse_op(70,1388
error_code sm_parse_next_hex(77,1566
instr_operation parse_op(102,2057

frontend.h,24
#define FRONTEND_H2,19

instr.h,354
#define INSTR_HEADER2,21
  LOAD,13,192
  STORE,14,200
  INTEGER,15,209
  BRANCH,16,220
  FPADD,17,230
  FPMUL,18,239
  UNKNOWN 19,248
} instr_operation;20,283
typedef unsigned int reg;22,303
  instr_operation op;25,347
  reg rs;26,369
  reg rt;27,379
  reg rd;28,389
  unsigned int extra;29,399
  unsigned int addr;32,494
} instr;33,515

reg_map.c,42
static unsigned int REG_MAP[REG_MAP3,22

backend.c,141
static unsigned int backend_cycle 3,22
static unsigned int pc_addr 4,61
static char instructions_left 5,94
error_code backend_step(8,162

error.c,28
const char* get_error(3,20

reg_map.h,70
#define REGMAP_H2,17
#define PHYS_REGS 4,35
#define LOGI_REGS 5,56
