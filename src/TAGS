
backend.h,179
#define BACKEND_H2,18
#define BACKEND_DISPATCH_PER_CYCLE 13,236
  instr* instruction;17,298
  unsigned int cycle_num;18,320
  void* next;19,346
} instr_history_entry;20,360

error.h,334
#define ERROR_H2,16
#define SUCCESS 7,74
#define UNKNOWN_ERROR 8,92
#define INSTR_PARSING_ERROR 9,116
#define IDX_OVERFLOW 10,147
#define BACKEND_FINISHED 11,171
#define INSTR_QUEUE_FULL 12,199
#define REGISTER_MAP_FULL 13,227
#define ACTIVE_LIST_FULL 14,256
#define DECODE_BUFFER_FULL 15,284
typedef int error_code;17,315

committer.h,25
#define COMMITTER_H2,20

committer.c,298
static instr* __instructions_to_commit[__instructions_to_commit3,24
static unsigned int __instructions_to_commit_size 4,92
void __calc_committer(6,148
void __edge_committer(19,545
unsigned int how_many_will_commit_next_clock(44,1282
unsigned int how_many_addr_will_commit_next_clock(48,1374

active_list.h,204
#define ACTIVE_LIST_H2,22
#define ACTIVE_LIST_SIZE 11,167
  instr* instruction;14,213
  char is_ready_on_next_clock;15,235
  phys_reg physical;16,266
  void* next;17,287
} active_list_entry;18,301

instr_queue.h,262
#define INSTR_QUEUE_H2,22
#define INT_QUEUE_SIZE 13,212
#define ADDR_QUEUE_SIZE 14,238
#define FP_QUEUE_SIZE 15,265
#define ISSUE_CYCLES 17,291
  instr* instruction;20,332
  unsigned int cycles_left;21,354
  void* next;22,382
} instr_queue_entry;23,396

active_list.c,486
static active_list_entry* head 3,26
active_list_entry* get_newest_entry(5,66
unsigned int size(14,257
char active_list_is_full(24,431
char active_list_is_empty(28,510
error_code active_list_add(32,576
void active_list_set_instr_ready(57,1224
bool active_list_is_instr_ready(70,1562
instr* active_list_get_instr_ready(82,1897
void active_list_commit_instruction(101,2309
unsigned int active_list_how_many_spots_next_clock(117,2719
void active_list_handle_mispredict(121,2872

instr_queue.c,814
static instr_queue_entry* int_queue_head 6,97
static instr_queue_entry* addr_queue_head 9,164
static instr_queue_entry* fp_queue_head 12,239
static instr* _queue_lookahead[_queue_lookahead14,288
static size_t _queue_lookahead_size 15,359
size_t get_queue_size(18,421
instr_queue_entry** get_queue_by_type(33,763
void instr_queue_remove(51,1138
bool will_instr_inputs_be_ready(72,1669
instr* instr_queue_get_ready_addr_instr(89,2239
instr* instr_queue_get_ready_int_instr(105,2783
void __calc_instr_queue(128,3333
void insert_instruction(153,4034
void __edge_instr_queue(179,4727
unsigned int instr_queue_free_int_spots_next_clock(212,5672
unsigned int instr_queue_free_addr_spots_next_clock(216,5850
void instr_queue_handle_mispredict_helper(221,6033
void instr_queue_handle_mispredict(241,6527

fetch_stage.h,167
#define FETCH_STAGE_H2,22
#define FETCH_CYCLES 7,86
  instr* instruction;10,127
  unsigned int cycles_left;11,149
  void* next;12,177
} fetch_stage_entry;13,191

decode_buffer.h,209
#define DECODE_BUFFER_H2,24
#define DECODE_BUFFER_SIZE 10,152
#define DECODE_CYCLES 11,181
  instr* instruction;14,223
  unsigned int cycles_left;15,245
  void* next;16,273
} decode_buffer_entry;17,287

fetch_stage.c,193
static fetch_stage_entry* head 3,26
unsigned int __calc_fetch_stage(5,66
void __edge_fetch_stage_add_instr(12,277
instr* fetch_get_ready_instr(27,714
void fetch_stage_remove_instr(43,1046

decode_buffer.c,484
static decode_buffer_entry* decode_buffer_head 3,28
static instr* __calc_scheduled_to_be_added[__calc_scheduled_to_be_added5,85
static unsigned int __calc_scheduled_size 6,160
unsigned int get_size(8,208
bool is_full(18,393
void add_instruction(22,473
void __calc_decode_buffer(37,935
void __edge_decode_buffer(46,1230
instr* decode_buffer_get_next_ready_instr(63,1711
void decode_buffer_remove_instruction(80,2137
unsigned int decode_buffer_free_spots_next_clock(96,2592

misc.c,23
unsigned int min(3,19

frontend.c,272
static instr** instruction_buffer;3,23
static unsigned int idx 4,58
static unsigned int capacity 5,87
void frontend_init(7,122
void frontend_enqueue(12,245
void frontend_clean(21,490
error_code frontend_getinstr(29,629
unsigned int frontend_get_instr_count(37,810

mipsr10k.c,45
int main(11,190
void print_history(61,1437

instr.c,201
error_code parse_instruction(9,213
void skip_whitespace(68,1371
error_code sm_parse_op(72,1445
error_code sm_parse_next_hex(79,1623
instr_operation parse_op(102,2077
const char* get_str(127,2419

functional.h,158
#define FUNCTIONAL_H2,21
#define FUNCTIONAL_INTEGER_CYCLES 8,109
  instr* instruction;11,163
  unsigned int cycles_left;12,185
} functional_entry;13,213

misc.h,20
#define MISC_H2,15

frontend.h,24
#define FRONTEND_H2,19

instr.h,559
#define INSTR_HEADER2,21
  NONE,13,192
  FETCH,14,200
  DECODE,15,209
  ISSUE,16,219
  EXECUTE,17,228
  FINISHED,18,239
  COMMITTED19,251
} instr_stage;20,263
  LOAD,23,294
  STORE,24,302
  INTEGER,25,311
  BRANCH,26,322
  FPADD,27,332
  FPMUL,28,341
  UNKNOWN 29,350
} instr_operation;30,415
typedef unsigned int reg;32,435
  const char* original_str;35,479
  instr_operation op;36,507
  reg rs;37,529
  reg rt;38,551
  reg rd;39,573
  unsigned int extra;40,598
  unsigned int addr;43,693
  instr_stage stage;44,714
} instr;45,735

functional.c,439
static instr* _next_instr_alu1 4,59
static instr* _next_instr_alu2 5,98
static instr* _next_instr_addr 6,137
static functional_entry* _curr_instr_alu1 10,214
static functional_entry* _curr_instr_alu2 11,264
static functional_entry* _curr_instr_addr 12,314
static unsigned int free_int_spots 15,442
void __calc_functional_units(17,483
void __edge_functional_units(31,1025
unsigned int functional_free_int_spots_next_clock(86,3197

reg_map.c,276
free_list_entry* free_list 6,124
busy_list_entry* busy_list 7,159
void reg_map_init(9,195
phys_reg reg_map_assign(18,339
void add_to_free_list(31,651
void add_to_busy_list(44,1002
instr* reg_map_get_latest_instr_writing_to(59,1465
void reg_map_free_by_logical(72,1875

backend.c,382
static unsigned int backend_cycle 3,22
static unsigned int pc_addr 4,61
static instr* instr_mispredicted 5,94
static instr_history_entry** history;8,189
void backend_init(12,260
void backend_branch_mispredict(23,530
error_code backend_cycle_step(27,622
unsigned int record_history(71,1676
instr_history_entry** get_history(113,2861
unsigned int backend_get_cycle(117,2920

error.c,28
const char* get_error(3,20

reg_map.h,361
#define REGMAP_H2,17
#define PHYS_REGS 8,96
#define LOGI_REGS 9,117
typedef unsigned int phys_reg;11,139
typedef unsigned int logi_reg;12,170
  phys_reg physical;15,219
  void* next;16,240
} free_list_entry;17,254
  phys_reg physical;20,291
  logi_reg logical;21,312
  instr* instruction_writing;22,332
  void* next;23,362
} busy_list_entry;24,376
